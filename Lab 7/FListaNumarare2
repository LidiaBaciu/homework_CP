#include <stdio.h>
#include <stdlib.h>

/*Să se scrie o funcție C care determină câte perechi de elemente prime între ele sunt memorate într-o lista simplu înlănțuită.
Dacă lista conține valorile (4 7 8 2 9 2 8) funcția va returna valoarea 11.
Perechile sunt: (4 7) (4 9) (7 8) (7 2) (7 9) (7 2) (7 8) (8 9) (2 9) (9 2) (9 8)
*/
struct lista{

    int value;
    struct lista* nextElement;

};


void addToEnd(struct lista* modifier){

    int value;
    struct lista* newElement = malloc( sizeof(struct lista) );

    while(modifier->nextElement != NULL)
        modifier = modifier->nextElement;

    printf("\nIntroduceti o valoare(adaugare la final): ");
    scanf("%d", &value);

    modifier->nextElement = newElement;
    newElement->nextElement = NULL;
    newElement->value = value;


}

void showList(struct lista* modifier){

    printf("\nLista: ");

    while(modifier->nextElement != NULL){

        modifier = modifier->nextElement;
        printf("%d ", modifier->value);


    }

    printf("\n");

}


int isPrime(int a, int b){

    while(a != b){
        if(a>b) a=a-b;
            else
                b=b-a;
    }
    if(a==1) return 0;
        else return 1;

    }

int HowManyPairs( struct lista* modifier){

    int count, value;
    count = 0;

    while(modifier->nextElement != NULL){

        modifier = modifier->nextElement;
        value= modifier->value;
//trebuia retinut head-ul listei, pentru a reveni?
        while(modifier->nextElement != NULL){
                if(isPrime(value, modifier->value) == 1)
                    count++;
                modifier = modifier->nextElement;
            }

    }

    return count;
    }
int main(){


    struct lista *Lista = malloc( sizeof(struct lista) );
    int i;
    Lista->nextElement = NULL;

    for(i = 0; i < 7; i++)
        addToEnd(Lista);
    showList(Lista);

    int var;
    var = HowManyPairs(Lista);

    printf("Lista contine %d perechi.", var);

return 0;
}
